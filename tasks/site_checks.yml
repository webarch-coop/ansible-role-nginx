# Copyright 2018-2024 Chris Croome
#
# This file is part of the Webarchitects Nginx Ansible role.
#
# The Webarchitects Nginx Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Nginx Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Nginx Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Nginx site checks
  block:

    - name: Check sites-enabled and sites-disabled
      block:

        - name: Check that no sites are set to be enabled and disabled at the same time
          ansible.builtin.assert:
            that:
              - nginx_sites_disabled | intersect(nginx_sites_enabled) | length == 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

      rescue:

        - name: Debug nginx_sites_disabled
          ansible.builtin.debug:
            var: nginx_sites_disabled

        - name: Debug nginx_sites_enabled
          ansible.builtin.debug:
            var: nginx_sites_enabled

        - name: Fail due to one or more sites being set to be enabled and disabled at the same time
          ansible.builtin.fail:

      when:
        - nginx_sites_disabled is defined
        - nginx_sites_enabled is defined

    - name: Check the sites-available
      ansible.builtin.command: ls -l /etc/nginx/sites-available/
      check_mode: false
      changed_when: false
      register: nginx_ls_sites_available

    - name: Debug sites-available
      ansible.builtin.debug:
        var: nginx_ls_sites_available.stdout
        verbosity: 3

    - name: Set a fact for the sites-available
      ansible.builtin.set_fact:
        nginx_existing_sites_available: "{{ nginx_ls_sites_available.stdout | string | community.general.jc('ls') }}"
        nginx_existing_sites_available_filenames: "{{ nginx_ls_sites_available.stdout | string | community.general.jc('ls') | community.general.json_query('[].filename') | sort }}"
      when: nginx_ls_sites_available.stdout != "total 0"

    - name: Debug nginx_existing_sites_available
      ansible.builtin.debug:
        var: nginx_existing_sites_available
        verbosity: 2

    - name: Debug nginx_existing_sites_available_filenames
      ansible.builtin.debug:
        var: nginx_existing_sites_available_filenames
        verbosity: 2

    - name: Check the sites-enabled
      ansible.builtin.command: ls -l /etc/nginx/sites-enabled/
      check_mode: false
      changed_when: false
      register: nginx_ls_sites_enabled

    - name: Debug sites-enabled
      ansible.builtin.debug:
        var: nginx_ls_sites_enabled.stdout
        verbosity: 3

    - name: Set a fact for the list of sites-enabled
      ansible.builtin.set_fact:
        nginx_existing_sites_enabled: "{{ nginx_ls_sites_enabled.stdout | string | community.general.jc('ls') }}"
        nginx_existing_sites_enabled_filenames: "{{ nginx_ls_sites_enabled.stdout | string | community.general.jc('ls') | community.general.json_query('[].filename') | sort }}"
      when: nginx_ls_sites_enabled.stdout != "total 0"

    - name: Debug nginx_existing_sites_enabled
      ansible.builtin.debug:
        var: nginx_existing_sites_enabled
        verbosity: 2

    - name: Debug nginx_existing_sites_enabled_filenames
      ansible.builtin.debug:
        var: nginx_existing_sites_enabled_filenames
        verbosity: 2

    - name: Check that all sites that are to be enabled exist
      ansible.builtin.assert:
        that:
          - nginx_site in nginx_existing_sites_available_filenames
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      loop: "{{ nginx_sites_enabled }}"
      loop_control:
        loop_var: nginx_site
      when: nginx_existing_sites_available_filenames != []

    - name: Check that all sites that are to be disabled exist
      ansible.builtin.assert:
        that:
          - nginx_site in nginx_existing_sites_available_filenames
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      loop: "{{ nginx_sites_disabled }}"
      loop_control:
        loop_var: nginx_site
      when: nginx_existing_sites_available_filenames != []

  tags:
    - nginx
    - ngnix_config
...
